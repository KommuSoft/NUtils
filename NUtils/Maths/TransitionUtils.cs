//
//  TransitionUtils.cs
//
//  Author:
//       Willem Van Onsem <vanonsem.willem@gmail.com>
//
//  Copyright (c) 2014 Willem Van Onsem
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using System.Collections.Generic;
using NUtils.Bitwise;

namespace NUtils.Maths {
	/// <summary>
	/// A utility class used for functions and methods on <see cref="T:ITransition"/> instances.
	/// </summary>
	public static class TransitionUtils {

		/// <summary>
		/// Enumerate the sets of strongly connected groups: indices that form a cycle.
		/// </summary>
		/// <returns>A <see cref="T:IEnumerable`1"/> that contains the indices of strongly connected groups.</returns>
		/// <remarks>
		/// <para>The strongly connected groups are generated lazily: on demand the next group is generated.</para>
		/// <para>The groups are generated by ascending lowest index of the group.</para>
		/// <para>In the group, the first index is the lowest of the group, the next indices are all determined
		/// in the order of the cycle.</para>
		/// <para>Singleton groups are generated as well: indices that have a transition to themselves.</para>
		/// </remarks>
		public static IEnumerable<IEnumerable<int>> GetStronglyConnectedGroups (this ITransition transition) {
			int n = transition.Length;
			CompactBitVector glb = new CompactBitVector (n);
			CompactBitVector cur = new CompactBitVector (n);
			return null;
		}
	}
}

